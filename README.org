* Journal

** <week of 2014-09-22> Predrag configured pamldap netatalk + gaspar authentication
+ /etc/pam.d/netatalk
#auth    required        pam_ldap.so     try_first_pass
#account required        pam_ldap.so     try_first_pass
#session required        pam_permit.so

+ /etc/afp.conf 
#;
#; Netatalk 3.x configuration file
#;

#[Global]
#; Global server settings
#admin auth user =  root
#uam list = uams_dhx_pam.so uams_dhx2_pam.so

#; LDAP config

#ldap server = scoldap.epfl.ch
#ldap auth method = none
#ldap userbase = ou=users,o=epfl,c=ch
#ldap userscope = one
#ldap groupbase = ou=groups,o=epfl,c=ch
#ldap groupscope = one
#ldap uuid attr = uniqueIdentifier
#ldap uuid string = xxxxxx
#ldap name attr = uid
#ldap group attr = cn

# [Homes]
# basedir regex = /home
# time machine = yes



** <2014-09-23> Configured Netatalk + Samba in linux container
Predrag has configured a simle Linux container ( fedora 20) with samba and netatalk runing:
+ The home directory is mounted directly in the container (/home) from a virtual machine over the NFSv3 
+ Home directory samba-user is used for samba and afp-user is used for afp
  + Samba access : smb://samba-user@128.178.209.165
  + Samba pwd: JGHRlVgXcdg
  + AFP acces: afp://afp-user@128.178.209.165
  + AFP pwd: predrag





** <2014-09-16 Tue> Sample Docker container

Predrag set up Samba and BURP servers in a Docker container, ready to
be copied cookie-cutter style.

Samba access: 128.178.1.235, user samba-user, password predrag
BURP access: 128.178.1.235, user dominique, password abcdefgh

** <2014-09-17 Wed> Backing up from a Mac

Dominique configured his Mac (OSX 10.9.4, French) to back up to the
sample Docker container. Reference documentation: [[http://www.insanelymac.com/forum/topic/184462-guide-106-snow-leopard-time-machine-backup-to-network-share/][on InsanelyMac]], [[http://lifehacker.com/5691649/an-easier-way-to-set-up-time-machine-to-back-up-to-a-networked-windows-computer][on
LifeHacker]] (since getting the script is a pain on both, I attached it
below)

+ Need to create a "sparse bundle" first: 
  : NAME=`scutil --get ComputerName`;
  : hdiutil create -size ${SIZE}G -fs HFS+J -type SPARSEBUNDLE -volname 'Time Machine Backups' "${NAME}.sparsebundle"
  + This only succeeds on the local disk; doing that directly on the Samba share fails with "operation not supported" (and hdutil deletes the directory it created before exiting).
  + Setting up the UUID in a plist file as per the script seems to have no effect whatsoever (doesn't change the fact that sudo tmutil setdestination is required, see below)
+ Then, copy the sparse bundle to Samba:
  : mv "$NAME".sparsebundle /Volumes/samba-user/
+ Setting TMShowUnsupportedNetworkVolumes as per the LifeHacker article, [[http://forum.synology.com/enu/viewtopic.php?f%3D229&t%3D71049][seems to no longer have any effect]]. What [[https://apple.stackexchange.com/questions/107032/time-machine-backup-to-an-smb-share-mavericks][does work]] is to mount the newly created sparsebundle (double-click it in the Finder), then:
  : sudo tmutil setdestination /Volumes/Time\ Machine\ Backups/
+ Once this is done, Time Machine remembers all it needs to know and is smart enough to mount the SMB share, then the sparsebundle, upon attempting to start a backup. (You can even see the spinning arrows next to the mounted sparsebundle in the Finder).

Notes for later:
+ Despite Predrag's fear on the topic it looks like [[https://www.google.ch/search?q%3Dnetatalk%2B"time%2Bmachine%2B%3D%2Byes"][netatalk does support Time Machine]]. We should give that a try.

*** Script as downloaded from InsanelyMac (registration required)
#+BEGIN_SRC sh
#!/bin/bash
# A bash script to create a time machine disk image suitable for
# backups with OS X 10.6 (Snow Leopard)
# This script probably only works for me, so try it at your own peril!
# Use, distribute, and modify as you see fit but leave this header intact.
# (R) sunkid - September 5, 2009

usage ()
{
     echo ${errmsg}"\n"
     echo "makeImage.sh"
     echo "	usage: makeImage.sh size [directory]"
     echo "	Create a disk image with a max storage size of <size> and copy it"
     echo "	to your backup volume (if specified)"
}

# test if we have two arguments on the command line
if [ $# -lt 1 ]
then
    usage
    exit
fi

# see if there are two arguments and we can write to the directory
if [ $# == 2 ]
then
	if [ ! -d $2 ]
	then
 		errmsg=${2}": No such directory"
    	usage
    	exit
	fi
	if [ ! -w $2 ]
	then
		errmsg="Cannot write to "${2}
		usage
    	exit
	fi
fi

SIZE=$1
DIR=$2
NAME=`scutil --get ComputerName`;
UUID=`system_profiler | grep 'Hardware UUID' | awk '{print $3}'`

# get busy
echo -n "Generating disk image ${NAME}.sparsebundle with size ${SIZE}GB ... "
hdiutil create -size ${SIZE}G -fs HFS+J -type SPARSEBUNDLE \
	-volname 'Time Machine Backups' "${NAME}.sparsebundle" >> /dev/null 2>&1

echo "done!"

echo -n "Generating property list file with uuid $UUID ... "

PLIST=$(cat <<EOFPLIST
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
        <key>com.apple.backupd.HostUUID</key>
        <string>$UUID</string>
</dict>
</plist>
EOFPLIST)

echo $PLIST > "${NAME}.sparsebundle"/com.apple.TimeMachine.MachineID.plist
echo "done!"

if [ $# == 2 ]
then
	echo -n "Copying ${NAME}.sparsebundle to $DIR ... "
	cp -pfr "${NAME}.sparsebundle" $DIR/"${NAME}.sparsebundle"
	echo "done"
fi

echo "Finished! Happy backups!"
#+END_SRC
